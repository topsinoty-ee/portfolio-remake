// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model User {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String       @unique
    image         String?
    emailVerified DateTime?
    isContributor Boolean      @default(false)
    contributorId String?      @unique @db.ObjectId
    contributor   Contributor? @relation(fields: [contributorId], references: [id])
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Contributor {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    email           String     @unique
    linkedPlatforms Platform[]
    projectIds      String[]   @db.ObjectId
    user            User?
}

model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    user              User     @relation(fields: [userId], references: [id])
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.String
    access_token      String?  @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.String
    session_state     String?
    createdAt         DateTime @default(now())

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    user         User     @relation(fields: [userId], references: [id])
    expires      DateTime
    createdAt    DateTime @default(now())
}

model Project {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    slug           String        @unique
    title          String
    description    String?
    content        String?
    skillsUsed     String[]
    contributorIds String[]      @db.ObjectId
    lastUpdated    DateTime?
    isFeatured     Boolean       @default(false)
    for            String?
    status         ProjectStatus
    repo           String?
    link           String?
    comments       Comment[]
}

model Comment {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    projectId String  @db.ObjectId
    project   Project @relation(fields: [projectId], references: [id])
    userId    String  @db.ObjectId
    user      User    @relation(fields: [userId], references: [id])
}

enum Platform {
    GitHub
    email
    LinkedIn
    Twitter
    Website
}

enum ProjectStatus {
    under_maintenance
    active
    dead
    might_circle_back
    planning
    in_progress
}
